<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Luke Orland]]></title>
  <link href="http://flyorlandic.com/atom.xml" rel="self"/>
  <link href="http://flyorlandic.com/"/>
  <updated>2012-01-25T16:30:44-05:00</updated>
  <id>http://flyorlandic.com/</id>
  <author>
    <name><![CDATA[Luke Orland]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[combined_size_python_script]]></title>
    <link href="http://flyorlandic.com/blog/2012/01/25/combined-size-python-script/"/>
    <updated>2012-01-25T01:36:00-05:00</updated>
    <id>http://flyorlandic.com/blog/2012/01/25/combined-size-python-script</id>
    <content type="html"><![CDATA[<p>Here is a simple Python script that takes a list of files and prints their combined size in bytes (by default) or megabytes (by specifying the &#8211;mb switch). Code is below.</p>

<!-- more -->




<div><script src='https://gist.github.com/1673391.js?file=combined_size.py'></script>
<noscript><pre><code>#!/usr/bin/env python

from __future__ import print_function
import argparse
import os

def file_size(file_name):
    &quot;&quot;&quot;Returns size of the file named file_name in bytes.&quot;&quot;&quot;
    if not os.path.exists(file_name):
        msg = &quot;The file {} does not exist.&quot;.format(file_name)
        raise argparse.ArgumentTypeError(msg)
    return os.path.getsize(file_name)

def bytes_to_MB(bytes):
    &quot;&quot;&quot;Returns float value&quot;&quot;&quot;
    return bytes / 1e6

def main():
    # Parse the command line arguments.
    parser = argparse.ArgumentParser(description='Prints the combined MB of ' +
                                     'the files passed as arguments.')

    parser.add_argument('file_names', nargs='*',
                        help='files that are candidates for fitting')
    parser.add_argument('--mb', '-m', action='count',
                        help='prints the total number of bytes instead of MB')
    args = parser.parse_args()
    file_names = args.file_names
    mb = args.mb

    total_size = sum([file_size(fn) for fn in file_names])
    if mb:
        print(&quot;{}&quot;.format(total_size))
    else:
        print(&quot;{}&quot;.format(bytes_to_MB(total_size)))

if __name__ == '__main__':
    main()

</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[transcontinental dance collective]]></title>
    <link href="http://flyorlandic.com/blog/2012/01/13/transcontinental-dance-collective/"/>
    <updated>2012-01-13T20:09:00-05:00</updated>
    <id>http://flyorlandic.com/blog/2012/01/13/transcontinental-dance-collective</id>
    <content type="html"><![CDATA[<p>Two of my incredibly talented dancer friends embarked on a mission to travel the world learning and teaching dance. Indeed, they traveled many places and creative lovely and inventive dance videos wherever they went. I contributed a basic website to help lend their project a centralized presence on the internet. Mira and Robin have since diverted their attention to a new effort called <em>The Duet Project</em>, and I&#8217;m excited to see what sublime creations the will issue forth.</p>

<p>As for the old website, all my fancy CSS work is gone but most of the content still exists thanks to the Wayback Machine internet archive of <a href="http://web.archive.org/web/20080702030005/http://www.transcontinentaldance.org/">transcontinentaldance.org</a>.</p>

<p>Also for posterity, the source of the pages are on <a href="https://github.com/lukeorland/transcontinentaldance.org">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mediasite_extract_content]]></title>
    <link href="http://flyorlandic.com/blog/2012/01/13/mediasite-extract-content/"/>
    <updated>2012-01-13T19:54:00-05:00</updated>
    <id>http://flyorlandic.com/blog/2012/01/13/mediasite-extract-content</id>
    <content type="html"><![CDATA[<p>Mediasite is a set of webcasting solutions offered by Sonic Foundry. One of the products in the mediasite family is a lecture capturing platform. The end product provided by Mediasite is an embeddable webplayer that plays the video of lecturer in one window and simultaneously flipping through the slides. Slide transition times occur just as during the original lecture.</p>

<p>I wrote a Python script that parses the content of a Mediasite lecture and creates DV-formatted videos of the lecture and the slideshow. In my case these videos are useful for the sake of combining them into a single video which will then be uploaded to Vimeo. The command line tools <code>ffmpeg</code> and <code>mencoder</code> are required.</p>

<p>Below is more information about installing <code>ffmpeg</code> and <code>mencoder</code>, and the script is as follows.</p>

<!-- more -->




<div><script src='https://gist.github.com/1609649.js?file=mediasite_slides_movie.py'></script>
<noscript><pre><code># Convert a Mediasite content for a lecture into two DV-formatted videos:
#   one from the lecture
#   one of the slideshow with timings extracted from the Mediasite content.
#
# Usage: run this Python script from the root directory of the Mediasite
# content.
# It's the directory that contains the directories and files as follows:
# App_Themes/    Content/       Player.html   PlayerOptions/     Players/
#
# Luke Orland
# Fri Jan 13 19:45:02 EST 2012

from __future__ import print_function
import os
import re
import shlex
import subprocess

FPS = 1   # Frames per second
ROOT = os.path.abspath('.')

def count_jpg_files(file_path):
    return 

# User should specify the root directory containing Mediasite presentation
# files. Probably is something like Untitled-1234/ or similar.

# Count the number of JPG files in the Content directory.
content_dir = os.path.join(ROOT, 'Content')
list_jpgs = [file for file in os.listdir(content_dir) if
             file.lower().endswith('.jpg')]

num_jpg_files = len(list_jpgs)

# Read the transition times from the Players/Scripts/standalone-manifest.js
# file.
transition_times_file_path = os.path.join(ROOT, 'Players', 'Scripts',
                                          'standalone-manifest.js') 
re_slide_xstn_ms = re.compile('\s*Manifest\.Slides\[\d+\] = new Slide\(&quot;&quot;,(\d+),&quot;&quot;\);')
transition_times_ms = []
with open(transition_times_file_path) as fh:
    for line in fh.readlines():
        match = re_slide_xstn_ms.match(line)
        if match is not None:
            transition_times_ms.append(int(match.group(1)))
assert len(transition_times_ms) == num_jpg_files
assert len(transition_times_ms) == len(list_jpgs)

# Create a text file that repeates the appropriate slide once per line at X FPS
# rate.
output_lines = []
frame_number = 0
frame_number_ms = lambda x: x / FPS * 1000
idx = 0
while idx &lt; num_jpg_files:
    frame_number += 1
    output_lines.append(list_jpgs[idx])
    if frame_number_ms(frame_number) &gt;= transition_times_ms[idx]:
        idx += 1
jpg_frames_file_path = os.path.join(ROOT, 'jpg_frames.txt')
with open(jpg_frames_file_path, 'w') as fh:
    lines_str = &quot;\n&quot;.join(output_lines)
    fh.write(lines_str)

# Use ffmpeg to convert the WMV lecture video into DV.
# (Start it first, since it takes the longest to finish.)
cmd = 'ffmpeg -i Content/video.wmv -target ntsc-dv lecture.dv'
args = shlex.split(cmd)
p = subprocess.Popen(args, cwd=ROOT)

# Use that text file with the MEncoder script to turn the JPGs into an AVI.
cmd = 'mencoder mf://@../jpg_frames.txt -mf w=1280:h=1024:fps=1:type=jpg -ovc lavc -lavcopts vcodec=mpeg4:mbd=2:trell -oac copy -o ../slides.avi'
CWD = os.path.join(ROOT, 'Content')
args = shlex.split(cmd)
p = subprocess.Popen(args, cwd=CWD)
p.wait()
print()

# Use ffmpeg to convert the AVI into DV.
cmd = 'ffmpeg -i slides.avi -target ntsc-dv slides.dv'
args = shlex.split(cmd)
p = subprocess.Popen(args, cwd=ROOT)
print()

</code></pre></noscript></div>


<h1>Installing <code>ffmpeg</code> and <code>mencoder</code></h1>

<h2>Mac OS X</h2>

<h3><code>mencoder</code> with Homebrew</h3>

<p>A user who has <code>homebrew</code> installed presumably has read/write access to the right system directories, and the commands are simply</p>

<pre><code>brew install mplayer
</code></pre>

<h3><code>mencoder</code> with downloaded binaries</h3>

<p>Not having read/write access to the right system directories on a certain system, I found a different approach, which is to download the binaries and update the script to use the correct location.</p>

<p>The MEncoder binary can be downloaded from the bottom of this <a href="http://stefpause.com/apple/mac/mplayer-os-x-10rc1-and-mencoder-binaries/">post</a>.</p>

<h3>ffmpeg with Homebrew</h3>

<p>A user who has <code>homebrew</code> installed presumably has read/write access to the right system directories, and the commands are simply</p>

<pre><code>brew install ffmpeg
</code></pre>

<h3><code>ffmpeg</code> from source</h3>

<p>This <a href="http://jungels.net/articles/ffmpeg-howto.html">post</a> provides instructions on building ffmpeg from source. It&#8217;s likely that one needs the extra libraries installed with XCode to build this from source.</p>

<h3><code>ffmpeg</code> binary</h3>

<p>The ffmpegX project (which seems to be defunct) provides a command-line binary in the OS X package. Download it, install it, and then edit the script to use the <code>ffmpegX</code> binary located at <code>Applications/ffmpegX.app/Contents/MacOS/ffmpegX</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a knapsack for Vimeo]]></title>
    <link href="http://flyorlandic.com/blog/2012/01/10/a-knapsack-for-vimeo-pt-1/"/>
    <updated>2012-01-10T09:43:00-05:00</updated>
    <id>http://flyorlandic.com/blog/2012/01/10/a-knapsack-for-vimeo-pt-1</id>
    <content type="html"><![CDATA[<p>The Vimeo Premium account allows a user to upload up to 5 GB of videos per week. The size of a video cannot be distributed across subsequent weeks. Unused upload space does not roll over to following weeks. My goal is to make the most cost-effective use of the Vimeo Premium account by uploading as close to the full 5 GB as possible every week.</p>

<p>As it turns out, selecting a subset of available video files that combine for the maximum fit within a certain limit is an instance of the <a href="http://en.wikipedia.org/wiki/Knapsack_problem#0-1_knapsack_problem">0-1 knapsack problem</a>. I have taken a crack at implementing a solution for this problem. First, I wrote a 0-1 knapsack solver module (in Python) as well as a command-line Python script that utilizes the solver to determine the optimal list of video files to upload for the week.</p>

<h1>Search space</h1>

<p>To understand how this is a difficult problem to solve, consider the number of possible combinations of files that could comprise a unique subset. Each file is either in each subset or not. That means there are 2<sup>N</sup> possible combinations of candidate files. For a set of 40 files, there would be 2<sup>40</sup> = 1,099,511,627,776 from which an exact optimal subset would be identified.</p>

<h1>Solution</h1>

<p>My first solution uses a pure branch-and-bound recursive algorithm. The weight and profit of each file is its size in bytes, and the capacity of the knapsack is 5000000000 bytes. This approach is much too inefficient, likely due to repeated evaluations of the same subsets in rearranged order.</p>

<h1>Next step</h1>

<p>Alternatively, a well-known dynamic programming algorithm can be employed. I wrote this method. Indeed, it finds the exact solution much more quickly, in O(nW) time and O(W) space, where n is the number of candidate files, and W is the size limit.</p>

<p>The code I have written can be found at <a href="https://github.com/lukeorland/maxfit">github.com/lukeorland/maxfit</a>.</p>
]]></content>
  </entry>
  
</feed>
